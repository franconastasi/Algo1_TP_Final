#define IMU_ID "IMU"
#define US_ID "US"
#define GPS_ID "GPS"


crear_arreglo_sensores_modelo(sensor_t***arr_sensores,size_t* cant_sensores, FILE* ptrf_model){

  sensor_type_t id;
  int sub_id;
  char * model_line,*endptr;
  bool_t *eof;
  size_t n=1;
  size_t cant,numparam;
  char ** campos_model
  double * parametros;
  sensor_t * sensor,**aux;

  if(!arr_sensores || !cant_sensores){
      return ST_NULL_POINTER;
  }

  (*arr_sensores)=NULL;

  do{
      if((st=read_line(ptrf_model,&model_line,&eof)!=ST_SUCCESS)
        return ST_ERROR_LEER_MODELO;
      if((*model_line)==NULL)
        continue;
      if((st=split(model_line,DELIM,&cant,&campos_model))!=ST_SUCCESS)
        return st;
      if((st=obtener_id(campos_model[ID_POS]),&id)!=ST_OK)
        return st;
      if((st=obtener_subid(campos_model[ID_POS]),&sub_id)!=ST_OK)
        return st;
      numparam=cant-2;
      if((st=obtener_params(campos_model,&parametros,numparam))!=ST_OK)
        return st;

      if(aux=(sensor_t**)realloc((*arr_sensores),(*cant_sensores)*sizeof(sensor_t*)))==NULL){
        destruir_arreglo_sensor(arr_sensores,cant_sensores);
        return ST_NO_MEM;
      }
      *arr_sensores=aux;

      switch(id){

        case SENSOR_IMU:
          if ((st=IMU_crear(&sensor,id,sub_id,parametros,numparam))!=ST_OK){
            destruir_arreglo_sensor(arr_sensores,cant_sensores);
          }
          break;

        case SENSOR_GPS:
          if ((st=GPS_crear(&sensor,id,sub_id,parametros,numparam))!=ST_OK){
            destruir_arreglo_sensor(arr_sensores,cant_sensores);
            return st;
          }
          break;

        case SENSOR_US:
          if ((st=IMU_crear(&sensor,id,sub_id,parametros,numparam))!=ST_OK){
            destruir_arreglo_sensor(arr_sensores,cant_sensores);
            return st;
          }
          break;

      }
      (*arr_sensores)[cant_sensores-1]=sensor;
      *cant_sensores++;

    } while (*eof==FALSE);

  return ST_OK;

}

status_t obtener_id(char* id_string,sensor_type_t *id){
  if (!id || !id_string ){
    return ST_NULL_POINTER;
  }
  if (strcmp(id_string,IMU_ID)==0){/*IMU_ID  Y TODOS LOS XX_ID SON MACROS A DEFINIR*/
    *id=SENSOR_IMU;
    return ST_OK;
  }
  if (strcmp(id_string,GPS_ID)==0){
    *id=SENSOR_GPS;
    return ST_OK;
  }
  if (strcmp(id_string,US_ID)==0){
   *id=SENSOR_US;
   return ST_OK;
  }
  return ST_INVALID_ID;
}

status_t obtener_subid (char*subid_string,int* sub_id){
  if (!sub_id || !id_string ){
    return ST_NULL_POINTER;
  }

  *sub_id=(int)strtod(campos_model[SUB_ID_POS],&endptr);
  if(*endptr != '\0')
    return ST_INVALID_SUBID;
}

status_t obtener_params (char**params_array,double** params,size_t cant){
  size_t i;
  char * endptr;

  if(!params_array || !params)
    return ST_NULL_POINTER;
  if((*params=(double*)calloc(cant,sizeof(double)))==NULL)
    return ST_NO_MEM;

  for(i=0;i<cant;i++){
    (*params)[i]=strtod(params_array[i+2],&endptr)
    if(*endptr != '\0'){
      free(*params);
      *params=NULL;
      return ST_INVALID_PARAMS;
    }
  }
  return ST_OK;
}
